from db import *
from datetime import datetime

class Task:
    
    def __init__(self, userid, title, description, deadline, priority, effort):
        self.timestamp = str(datetime.now()) # this is autogenerated
        self.ordinality = 0 
        self.user = userid
        self.title = title
        self.description = description
        self.time = deadline
        self.priority = priority
        self.effort = effort
        self.complete = False
        
    def save_to_db(self):
        """Save this task to the tasks table"""
        cur = get_db().cursor()
        cur.execute("INSERT INTO tasks (userid, title, description, timestamp, deadline, priority, effort, ordinality, complete) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", self.get_values())
        get_db().commit()
        
    def render(self):
        """Return the HTML rendering of a task with a template"""
        pass
    
    def get_values(self):
        """Return all the values for insertion into databases
        (taskid, userid, title, description, timestamp, deadline, priority, effort, ordinality, complete)
        """
        return (self.user, self.title, self.description, self.timestamp, self.time, self.priority, self.effort, self.ordinality, self.complete)

    def sort1():
        """ sort the tasks after a new task is added to the database
        (taskid, userid, title, description, timestamp, deadline, priority, effort, ordinality, complete)
        """

        taskslist = db.db_get_tasks();
        sortedlist = []
        current = taskslist[0]
        added = False
        # by priority
        for elem in taskslist:
            current = sortedlist[0]
            while(added == False):
                if (len(sortedlist) == 0):
                    sortedlist.append(elem)
                    added = True
                elif(current.index() == 0 and elem[x][6] > current[6]):
                    sortedlist.insert(0,elem)
                    added = True
                elif (elem[x][6] == current[6]):
                    sortedlist.insert(current.index() + 1, elem) 
                    added = True
                elif (current.index() == len(sortedlist) - 1 and elem[x][6] < current[6]):
                    sortedlist.append(elem)
                    added = True
                else:
                    current = current[index()+1]
            added = False
        return sortedlist

    def sort2():
        # by deadline
        """ sort the tasks by deadline
        (taskid, userid, title, description, timestamp, deadline, priority, effort, ordinality, complete)
        """
        taskslist = db.db_get_tasks();
        sortedlist = []
        current = taskslist[0]
        added = False

